def lu_doolittle_pivot(A):
    n = len(A)
    L = np.zeros((n,n))
    U = np.zeros((n,n))
    P = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            P[i][j] = 1
    for i in range(n):
        max = A[i][i]
        for j in range(i+1,n):
            if A[j][i] > max:
                max = A[j][i]
                row = j
        if i != row:
            for k in range(n):
                temp = A[i][k]
                A[i][k] = A[row][k]
                A[row][k] = temp
            for k in range(n):
                temp = P[i][k]
                P[i][k] = P[row][k]
                P[row][k] = temp
        for j in range(i+1):
            s1 = sum(L[i][k] * U[k][j] for k in range(j))
            if (i == j):
                L[i][j] = 1
                U[i][j] = A[i][j] - s1
            else:
                L[i][j] = (1.0 / U[j][j] * (A[i][j] - s1))
                U[i][j] = 0
    return P, L, U

A = np.array([[3,7,-2,6],[9,21,14,6],[-1,5,8,1],[1,2,-1,5]])
P, L, U = lu_doolittle_pivot(A)
print(P)
print(L)
print(U)