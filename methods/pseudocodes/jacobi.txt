B = np.array([6,25,-11,15],float)

X = np.array([0,0,0,0],float)

E = 0.00001
M = 25

print()
[X,K] = jacobim(A,B,X,E,M)

if K<M:
	print("La solución es: X = "+str(np.transpose(X.round(7)))+"\tIteraciones: "+str(K+1))
else:
	print("El método no convergió después de "+str(M)+" iteraciones")


print(pprint.pprint(vector_solucion))
print(pprint.pprint(num_iteraciones))

pprint.pprint(A)
pprint.pprint(b)

print("")

[x,k]=jacobim(A,b,x,1.e-14,maxite)

if(k==maxite):
	print("\nEl método diverge o no converge para la cota de error pedido")

else: 
	print("\nEl vector 'x' es:")
	print(x)

	print("\nEl numero de iteraciones es: "+str(k+1))




1. Define the size of the nxn matrix 'A' and the nx1 vector 'b'
2. Initialize the nx1 vector 'x' with all zeros
3. Define the max number of iterations 'maxite' and the tolerance for the norm of the difference between iterations 'e'
4. For each iteration 'k' from 1 to 'maxite':
    4.1 For each row 'i' of 'A':
        4.1.1 Create a variable 's' and initialize it with zero
        4.1.2 For each column 'j' of 'A', if the row is not equal to the column:
            4.1.2.1 Add the product 'A[i,j] * x[j]' to 's'
        4.1.3 Calculate the new value for 'x[j]' as '(b[i] - s) / A[i,j]'
    4.2 Calculate the norm of the difference between the new 'x' and the previous one
    4.3 If the norm is smaller than the tolerance 'e', return the new 'x' and the iteration number 'k', and stop the algorithm
    4.4 Otherwise, make the new 'x' the old one for the next iteration
5. If the algorithm reaches the end without returning, return an empty vector and the number of iterations as 'maxite'